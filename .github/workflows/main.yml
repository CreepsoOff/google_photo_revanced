name: Patch Google Photo APK

on:
  workflow_dispatch:
  push:
    branches:
      - master

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  discussions: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  build:
    name: Build and Patch APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download ReVanced CLI
        run: |
          curl -L -o revanced-cli.jar https://github.com/ReVanced/revanced-cli/releases/download/v4.6.0/revanced-cli-4.6.0-all.jar && break
          sleep 5

      - name: Download ReVanced Patches
        run: |
          curl -L -o revanced-patches.jar https://github.com/ReVanced/revanced-patches/releases/download/v4.17.0-dev.5/revanced-patches-4.17.0-dev.5.jar && break
          sleep 5

      - name: Download ReVanced Integrations
        run: |
          curl -L -o revanced-integrations.apk https://github.com/ReVanced/revanced-integrations/releases/download/v1.16.0-dev.4/revanced-integrations-1.16.0-dev.4.apk && break
          sleep 5

      - name: Download APK
        run: |
          curl -L -o google_photos_clean.apk https://github.com/CreepsoOff/google_photo_revanced/releases/download/dev0.1/Google.Photos_7.2.0.apk && break
          sleep 5

      - name: Patch APK
        run: |
          java -jar revanced-cli.jar patch \
            --patch-bundle revanced-patches.jar \
            -o patched_google_photos.apk \
            -d \
            google_photos_clean.apk
          echo "Patched APK created: patched_google_photos.apk"

      - name: Create output dir
        run: "mkdir release_output"

      - name: Move Patched APK
        run: |
          mv patched_google_photos.apk release_output/

      - name: Get version info
        id: version_info
        run: |
          echo "build_version=r$(echo ${GITHUB_SHA} | cut -c1-9)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.version_info.outputs.build_version }}',
              sha: context.sha
            })

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.version_info.outputs.build_version }}
          tag: ${{ steps.version_info.outputs.build_version }}
          makeLatest: "true"
          omitBody: true
          omitBodyDuringUpdate: true
          allowUpdates: true
          replacesArtifacts: true
          owner: ${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_OWNER }}
          repo: ${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_REPO }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pushing new release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.version_info.outputs.build_version }}
          artifacts: "release_output/*"
          tag: ${{ steps.version_info.outputs.build_version }}
          makeLatest: "true"
          omitBody: true
          omitBodyDuringUpdate: true
          allowUpdates: true
          replacesArtifacts: true
          owner: ${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_OWNER }}
          repo: ${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_REPO }}
          token: ${{ secrets.GITHUB_TOKEN }}
