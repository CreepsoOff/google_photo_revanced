name: Patch Google Photos APK

on:
  workflow_dispatch:  # Permet de démarrer le workflow manuellement
  push:
    branches:
      - master

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  discussions: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Revanced CLI
        run: |
          curl -L -o revanced-cli.jar https://github.com/ReVanced/revanced-cli/releases/download/v4.6.0/revanced-cli-4.6.0-all.jar && break
          # Retry if download fails
          sleep 5

      - name: Download Revanced Patches
        run: |
          curl -L -o revanced-patches.jar https://github.com/ReVanced/revanced-patches/releases/download/v4.17.0-dev.5/revanced-patches-4.17.0-dev.5.jar && break
          sleep 5

      - name: Download Revanced Integrations
        run: |
          curl -L -o revanced-integrations.apk https://github.com/ReVanced/revanced-integrations/releases/download/v1.16.0-dev.4/revanced-integrations-1.16.0-dev.4.apk && break
          sleep 5

      - name: Download APK
        run: |
          curl -L -o google_photos_clean.apk https://github.com/CreepsoOff/google_photo_revanced/releases/download/dev0.1/Google.Photos_7.2.0.apk && break
          sleep 5

      - name: Patch APK
        run: |
          TAG_NAME=$(echo "${GITHUB_SHA}" | cut -c1-7)  # Prend les 7 premiers caractères du SHA
          java -jar revanced-cli.jar patch \
            --patch-bundle revanced-patches.jar \
            -o patched_google_photos.apk \
            -d \
            google_photos_clean.apk
          echo "Patched APK created: patched_google_photos.apk"
      
      - name: Create GitHub Release
        id: create_release
        run: |
          TAG_NAME=$(echo "${GITHUB_SHA}" | cut -c1-7)  # Utilise le même TAG_NAME
          gh release create "$TAG_NAME" ./patched_google_photos.apk --title "Patched Google Photos" --notes "Release for $TAG_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Patched APK
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./patched_google_photos.apk
          asset_name: patched_google_photos.apk
          asset_content_type: application/vnd.android.package-archive
